<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>492</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run {input, parameters}	--set input to "TESTING THIS"	choose from list {"upper", "lower", "title", "title_smallarticles", "sentence"} with prompt "Select the type of capitalization:" without multiple selections allowed	set capType to (result as string)	changeCase(input, capType)	return resultend runproperty alphaList : "abcdefghijklmnopqrstuvwxyz"'s items &amp; reverse of "ABCDEFGHIJKLMNOPQRSTUVWXYZ"'s itemsto changeCase(theString, theCase)	if theCase is "title_smallarticles" then		changeCase_orig(theString, "title")		small_articles(result)	else		changeCase_orig(theString, theCase)		return result	end ifend changeCaseon small_articles(aString)	set capArticles to {" In ", " To ", " At ", " A ", " An ", " The ", " Of "} # spaces are mandatory!	set smallArticles to {" in ", " to ", " at ", " a ", " an ", " the ", " of "}	# fail early conditions . . . 	if (count capArticles) â‰  (count smallArticles) then error "unequal number of elements in lists "	if aString is "" then return ""	# we replace capitalized articles with lower cased ones below.	tell (a reference to my text item delimiters)		set tids to contents of it		repeat with i from 1 to (count capArticles)			set contents of it to item i of capArticles			set oldlist to text items of aString			set contents of it to item i of smallArticles			set aString to oldlist as string		end repeat		set contents of it to tids		return aString	end tellend small_articleson textItems from t	try		t's text items	on error number -2706		tell (count t's text items) div 2 to my (textItems from (t's text 1 thru text item it)) &amp; my (textItems from (t's text from text item (it + 1) to -1))	end tryend textItemson changeCase_orig(t, c)	if (count t) is 0 then return t	considering case		if c is not in {"upper", "lower", "title", "sentence"} then			error "The word \"" &amp; c &amp; "\" is not a valid option. Please use \"upper\", \"lower\", \"title\" or \"sentence\"."		else if c is "upper" then			set n to 1		else			set n to -1		end if		set d to text item delimiters		--&gt; c = "title"		--&gt; n = "-1"		log "n = " &amp; n		repeat with n from n to n * 26 by n			set text item delimiters to my alphaList's item n			set t to textItems from t			set text item delimiters to my alphaList's item -n			tell t to set t to beginning &amp; ({""} &amp; rest)			log "Loop number " &amp; n &amp; " - replaced "		end repeat		log "Repeat loop completed! t = " &amp; t		--&gt; "Repeat loop completed! t = "fAcilitAting an Attitude of openness"		if c is in {"title", "sentence"} then			if c is "title" then				set s to space			else				set s to ". "			end if			set t to (t's item 1 &amp; s &amp; t)'s text 2 thru -1			repeat with i in {s, tab, return, ASCII character 10}				set text item delimiters to i				if (count t's text items) &gt; 1 then repeat with n from 1 to 26					set text item delimiters to i &amp; my alphaList's item n					if (count t's text items) &gt; 1 then						set t to textItems from t						set text item delimiters to i &amp; my alphaList's item -n						tell t to set t to beginning &amp; ({""} &amp; rest)					end if				end repeat			end repeat			set t to t's text ((count s) + 1) thru -1		end if		set text item delimiters to d	end considering	tend changeCase_orig</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>CAE4C15B-84C8-49BB-A0BB-16FB26252EBA</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>FE1CFC7E-9603-4702-A0A6-773473B344C4</string>
				<key>UUID</key>
				<string>98E263A0-5C6F-402D-991F-C93061B1D884</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>309.000000:368.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleIDsByPath</key>
		<dict/>
		<key>applicationPaths</key>
		<array/>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<integer>0</integer>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.text</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>systemImageName</key>
		<string>NSTouchBarRefresh</string>
		<key>useAutomaticInputType</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
